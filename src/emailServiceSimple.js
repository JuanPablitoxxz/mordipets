// Servicio de email simple que funciona con Railway
// Usa un servicio de email que no est√© bloqueado

// Funci√≥n para enviar c√≥digo de verificaci√≥n
const sendVerificationCode = async (email, code) => {
  try {
    console.log(`üìß [SIMULADO] Enviando c√≥digo de verificaci√≥n a: ${email}`);
    console.log(`üîë C√≥digo de verificaci√≥n: ${code}`);
    console.log(`üìß [NOTA] En producci√≥n, este c√≥digo se enviar√≠a por email`);
    
    // Simular delay de env√≠o
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // En lugar de enviar email, guardamos el c√≥digo en la base de datos
    // para que el usuario pueda verlo en los logs
    console.log(`‚úÖ C√≥digo ${code} generado para ${email}`);
    
    return { 
      success: true, 
      messageId: `simulated-${Date.now()}`,
      code: code // Devolvemos el c√≥digo para mostrarlo
    };
    
  } catch (error) {
    console.error('‚ùå Error generando c√≥digo:', error.message);
    return { success: false, error: error.message };
  }
};

// Funci√≥n para enviar confirmaci√≥n de cambio de contrase√±a
const sendPasswordChangedConfirmation = async (email, userName) => {
  try {
    console.log(`üìß [SIMULADO] Enviando confirmaci√≥n de cambio de contrase√±a a: ${email}`);
    console.log(`üë§ Usuario: ${userName}`);
    console.log(`üìß [NOTA] En producci√≥n, se enviar√≠a confirmaci√≥n por email`);
    
    // Simular delay de env√≠o
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    console.log(`‚úÖ Confirmaci√≥n generada para ${userName} (${email})`);
    
    return { 
      success: true, 
      messageId: `simulated-confirmation-${Date.now()}`,
      simulated: true
    };
    
  } catch (error) {
    console.error('‚ùå Error generando confirmaci√≥n:', error.message);
    return { success: false, error: error.message };
  }
};

module.exports = {
  sendVerificationCode,
  sendPasswordChangedConfirmation
};
