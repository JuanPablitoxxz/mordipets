// Servicio de email simulado para desarrollo/testing
// Muestra el c√≥digo en consola en lugar de enviarlo por email

// Funci√≥n para enviar c√≥digo de verificaci√≥n (SIMULADA)
const sendVerificationCode = async (email, code) => {
  try {
    console.log(`üìß [SIMULADO] Intentando enviar c√≥digo de verificaci√≥n a: ${email}`);
    console.log(`üîë [SIMULADO] C√≥digo de verificaci√≥n: ${code}`);
    console.log(`üìß [SIMULADO] Email enviado exitosamente (simulado)`);
    
    // Simular delay de env√≠o
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return { 
      success: true, 
      messageId: `mock-${Date.now()}`,
      simulated: true
    };
    
  } catch (error) {
    console.error('‚ùå Error en simulaci√≥n de email:', error);
    return { success: false, error: error.message };
  }
};

// Funci√≥n para enviar confirmaci√≥n de cambio de contrase√±a (SIMULADA)
const sendPasswordChangedConfirmation = async (email, userName) => {
  try {
    console.log(`üìß [SIMULADO] Intentando enviar confirmaci√≥n de cambio de contrase√±a a: ${email}`);
    console.log(`üë§ [SIMULADO] Usuario: ${userName}`);
    console.log(`üìß [SIMULADO] Email de confirmaci√≥n enviado (simulado)`);
    
    // Simular delay de env√≠o
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return { 
      success: true, 
      messageId: `mock-confirmation-${Date.now()}`,
      simulated: true
    };
    
  } catch (error) {
    console.error('‚ùå Error en simulaci√≥n de email de confirmaci√≥n:', error);
    return { success: false, error: error.message };
  }
};

module.exports = {
  sendVerificationCode,
  sendPasswordChangedConfirmation
};
